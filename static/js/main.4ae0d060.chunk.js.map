{"version":3,"sources":["utils.js","constant.js","components/Grid.js","containers/Container.js","App.js","reportWebVitals.js","index.js"],"names":["log","console","bind","randomLine01","n","a","i","push","Math","random","randomLine09","arr","randomSquare09","r","clonedArray","array","slice","clonedSquare","res","length","plusArr","x","y","rows","cols","markedSquare","j","testMarkedSquare","module","exports","ensureEqual","b","message","arrayEquals","ensure","condition","GAME_STATUS","Button","styled","button","props","displayed","Grid","gameStatus","disabled","generateNewHead","prevQueue","direction","snakeHead","useSnakeMove","squareSize","initQueue","useState","snakeQueue","setSnakeQueue","generateRandomSweet","sweetGrid","setSweetGrid","useEffect","id","setInterval","newQueue","unshift","pop","getMovedQueue","targetInQueue","queue","eatSweet","clearInterval","target","outOfBounds","_","StartButton","PauseButton","StyledButtonLine","div","StyledContainer","Container","appStart","appPause","endGame","useContext","AppContext","setDirection","className","onKeyDown","event","newDirection","key","undefined","prevDirection","direction1","direction2","abs","tabIndex","onClick","hasVisited","gameOver","square","emptySquare","getSquareDisplayed","grids","gridLine","renderGrids","React","createContext","ModalContainer","ModalMask","AlertWindow","App","setGameStatus","Provider","value","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ae0d060.chunk.js","sourcesContent":["const log = console.log.bind(console)\n\nconst ensureEqual = function (a, b, message) {\n    if (a !== b) {\n        log(`${message}, (${a}) 不等于 (${b})`)\n    } else {\n        log('测试成功')\n    }\n}\n\nconst arrayEquals = function (a, b) {\n    // a 和 b 都是数组\n    // 如果这两个数组每一个位置对应的元素都相等, 那么说明 a 与 b 相等\n    // 此时返回 true, 否则返回 false\n\n    /*\n    提示\n    a. 如果这两个参数的长度不相等，直接返回 false\n    b. 遍历参数 a，每次遍历的元素为 a[i]，判断 a[i] 与 b[i] 的值\n        如果 a[i] 与 b[i] 不相等，直接返回 false\n    c. 循环结束后，返回 true\n    */\n    if (a.length !== b.length) {\n        return false\n    }\n\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false\n        }\n    }\n    return true\n}\n\nconst ensure = function (condition, message) {\n    // 在条件不成立的时候, 输出 message\n    if (!condition) {\n        log('*** 测试失败:', message)\n    } else {\n        log('||| 测试成功')\n    }\n}\n\nconst random01 = function () {\n    /*\n    js 标准数学库有一个随机数函数\n    Math.random()\n    它返回 0 - 1 之间的小数\n\n    用它实现本函数, 返回 0 或 1\n\n    提示：\n        这道题目有多种实现方式，我们这里拿 Math.random() 与 0.5 比较\n\n    分步提示：\n        1. 如果 Math.random() > 0.5，返回 1\n        2. 否则返回 0\n    */\n    return Math.random() > 0.8 ? 1 : 0\n}\n\nconst randomLine01 = function (n) {\n    /*\n    返回一个只包含了 0 1 的随机 array, 长度为 n\n    假设 n 为 5, 返回的数据格式如下(这是格式范例, 真实数据是随机的)\n    [0, 0, 1, 0, 1]\n\n    提示：\n        循环 n 次，每次调用 random01，push 到数组中\n\n    分步提示：\n        1. 循环 n 次，每次调用 random01，把结果 push 到数组中\n        2. 返回数组\n    */\n    let a = []\n    for (let i = 0; i < n; i++) {\n        a.push(random01())\n    }\n    return a\n}\n\nconst randomSquare01 = function (n) {\n    /*\n    返回以下格式的数据\n    假设 n 为 3, 返回的数据格式如下(这是格式范例, 真实数据是随机的)\n    注意, 这只是一个 array, 并不是它显示的样子\n    注意, 这是一个 array 不是 string\n    [\n        [0, 0, 1],\n        [1, 0, 1],\n        [0, 0, 0],\n    ]\n    返回, 包含了 n 个『只包含 n 个「随机 0 1」的 array』的 array\n\n    提示：\n        循环 n 次，每次调用 randomLine01，把结果 push 到数组中\n\n    分步提示：\n        1. 循环 n 次，每次调用 randomLine01，把结果 push 到数组中\n        2. 返回数组\n    */\n\n    let a = []\n    for (let i = 0; i < n; i++) {\n        a.push(randomLine01(n))\n    }\n    return a\n}\n\nconst randomLine09 = function (n) {\n    /*\n    返回一个只包含了 0 9 的随机 array, 长度为 n\n    假设 n 为 5, 返回的数据格式如下(这是格式范例, 真实数据是随机的)\n    [0, 0, 9, 0, 9]\n\n    提示：\n        先生成只包含 0 1 的数组，然后把数组里的 1 替换成 9\n\n    分步提示：\n        1. 调用函数 randomLine01 得到一个只包含 0 1 的数组 line\n        2. 遍历这个数组，如果遍历出来的元素为 1，就把这个位置的元素值设置为 9\n        3. 返回 line\n    */\n    let arr = randomLine01(n)\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === 1) {\n            arr[i] = 9\n        }\n    }\n    return arr\n}\n\nconst randomSquare09 = function (n) {\n    /*\n        返回一个随机二维数组, 只有 0, 9\n    [\n        [0, 9, 0, 0],\n        [0, 0, 9, 0],\n        [9, 0, 9, 0],\n        [0, 9, 0, 0],\n    ]\n    */\n\n    let r = []\n    for (let i = 0; i < n; i++) {\n        r.push(randomLine09(n))\n    }\n    return r\n}\n\nconst clonedArray = function (array) {\n    // array 是一个数组, 把 array 的元素复制到另一个新数组\n    // 返回新数组\n    // 这样改变旧数组的时候, 新数组不会发生改变\n\n    // 注意, 这个作业可以用 array.slice(0) 完成\n    return array.slice(0)\n}\n\nconst markedLine = function (array) {\n    /*\n    array 是一个只包含了 0 9 的 array\n    返回一个标记过的 array\n    ** 注意, 使用一个新数组来存储结果, 不要直接修改老数组\n    复制数组用 array.slice(0) 实现\n\n    标记规则如下\n    对于下面这样的 array\n    [0, 0, 9, 0, 9]\n    标记后是这样\n    [0, 1, 9, 2, 9]\n\n    规则是, 0 会被设置为左右两边 9 的数量\n\n    提示：\n        把 9 左右加 1，注意判断 9 是否在两边\n\n    分步提示：\n        1. 先使用 clonedArray 复制数组 array，用变量 line 存储\n        2. 遍历数组 line，每次遍历的元素是 n\n        3. 如果 n 为 9，并且 n 不是第一个元素，并且 n 左边的数字不是 9，把 n 左边的数字 + 1\n        4. 如果 n 为 9，并且 n 不是最后一个元素，并且 n 右边的数字不是 9，把 n 右面的数字 + 1\n        5. 返回数组 line\n    */\n    let res = clonedArray(array)\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] !== 9) {\n            continue\n        }\n        if (i !== 0) {\n            res[i - 1] += 1\n        }\n        if (i !== array.length - 1) {\n            res[i + 1] += 1\n        }\n    }\n    return res\n}\n\n// !!! 17 重点！！！！\nconst clonedSquare = function (array) {\n    // array 是一个二维数组, 即 array 的每一个元素依然是一个数组\n    // 把 array 的每一个数组元素的元素复制到另一个新数组\n    // 返回新数组\n    // 提示: 遍历 array, 复制每一个元素到新数组即可\n    let res = []\n    for (let i = 0; i < array.length; i++) {\n        res.push(clonedArray(array[i]))\n    }\n    return res\n}\n\nconst plusArr = function (arr, x, y) {\n    const rows = arr.length\n    if (rows === 0) {\n        return\n    }\n\n    const cols = arr[0].length\n\n    if (x < 0 || y < 0 || x >= rows || y >= cols) {\n        return\n    }\n\n    if (arr[x][y] === 9) {\n        return\n    }\n\n    arr[x][y]++\n}\n\nconst markedSquare = function (array) {\n    /*\n    array 是一个「包含了『只包含了 0 9 的 array』的 array」\n    返回一个标记过的 array\n    ** 注意, 使用一个新数组来存储结果, 不要直接修改老数组\n\n    范例如下, 这是 array\n    [\n        [0, 9, 0, 0],\n        [0, 0, 9, 0],\n        [9, 0, 9, 0],\n        [0, 9, 0, 0],\n    ]\n\n    这是标记后的结果\n    [\n        [1, 9, 2, 1],\n        [2, 4, 9, 2],\n        [9, 4, 9, 2],\n        [2, 9, 2, 1],\n    ]\n\n    规则是, 0 会被设置为四周 8 个元素中 9 的数量\n\n    提示：\n        这道题比较麻烦, 你要是不会, 就直接写「这道题目我不会」\n        这道题目循环调用前面作业的 markedLine，这道题目不要求写测试\n\n    分步提示：\n        1. 先定义一个 clonedSquare 函数，把 array 的内容复制到一个新数组中\n        2. 调用 clonedSquare 函数，得到 square\n        3. 遍历 square，每次遍历的元素为 line\n        4. 遍历 line，调用一个 markAround 函数，传入 square, i, j\n        5. 实现 markAround 函数，对于每一个 square[i][j] 这样的元素都按照规则 +1\n            分 4 个顶角、4 条边和剩下的元素这几种情形\n        6. 两重遍历结束后，square 就是需要的结果，return square 即可。\n    */\n\n    let res = clonedSquare(array)\n    let n = array.length\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (array[i][j] !== 9) {\n                continue\n            }\n\n            plusArr(res, i - 1, j)\n            plusArr(res, i + 1, j)\n            plusArr(res, i, j - 1)\n            plusArr(res, i, j + 1)\n\n            plusArr(res, i - 1, j - 1)\n            plusArr(res, i - 1, j + 1)\n            plusArr(res, i + 1, j - 1)\n            plusArr(res, i + 1, j + 1)\n        }\n    }\n    return res\n}\n\nconst testMarkedSquare = function () {\n    let arr = randomSquare09(5)\n    log(arr)\n\n    let res = markedSquare(arr)\n    log(res)\n}\ntestMarkedSquare()\n\nmodule.exports = {\n    log,\n    ensureEqual,\n    arrayEquals,\n    ensure,\n    randomSquare09,\n    markedSquare,\n    clonedSquare,\n}\n","export const SQUARE_SIZE = 20\n\nexport const GAME_STATUS = {\n    NOT_START: 0,\n    STARTED: 1,\n    PAUSE: 2,\n    OVER: 3,\n}\n","import React from 'react'\nimport { GAME_STATUS } from '../constant'\nimport styled from 'styled-components'\n\nconst Button = styled.button`\n  /* Adapt the colors based on primary prop */\n  background: ${props => props.displayed === true ? \"palevioletred\" : \"white\"};\n\n  width: 2em;\n  height: 2em;\n  margin: 0 0.1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nexport const Grid = ({\n    gameStatus,\n    displayed,\n}) => {\n    return (\n        <Button\n            disabled\n            displayed={displayed}\n        >\n        </Button>\n    )\n}\n","import React, {useState, useContext, useEffect} from 'react'\nimport {AppContext} from '../App'\nimport {Grid} from '../components/Grid'\nimport {clonedSquare} from '../utils'\nimport styled from 'styled-components'\nimport {GAME_STATUS} from '../constant'\nimport _ from 'lodash'\n\nconst log = console.log.bind(console)\n\nconst isOppositeDirection = (direction1, direction2) => {\n    return Math.abs(direction1 - direction2) === 2\n}\n\nconst emptySquare = (squareSize) => {\n    const square = []\n    for (let i = 0; i < squareSize; i++) {\n        square.push([])\n    }\n    return square\n}\n\nconst getSquareDisplayed = (snakeQueue, squareSize) => {\n    let displayed = emptySquare(squareSize)\n    for (const [x, y] of snakeQueue) {\n        if (outOfBounds(x, y, squareSize)) {\n            continue\n        }\n        displayed[x][y] = true\n    }\n    return displayed\n}\n\nconst generateNewHead = (prevQueue, direction) => {\n    const snakeHead = [...prevQueue[0]]\n\n    // snakeHead moved from prev snakeHead to direction once\n    if (direction === 1) {\n        snakeHead[0]--\n    } else if (direction === 2) {\n        snakeHead[1]++\n    }  else if (direction === 3) {\n        snakeHead[0]++\n    }  else if (direction === 4) {\n        snakeHead[1]--\n    }\n\n    return snakeHead\n}\n\nconst getMovedQueue = (prevQueue, direction) => {\n    const newQueue = clonedSquare(prevQueue)\n    const snakeHead = generateNewHead(newQueue, direction)\n\n    // add new snakeHead to first index of newQueue\n    newQueue.unshift(snakeHead)\n\n    // remove snakeTail\n    newQueue.pop()\n\n    return newQueue\n}\n\nconst eatSweet = (queue, direction) => {\n    queue.unshift(generateNewHead(queue, direction))\n    return queue\n}\n\nconst useSnakeMove = (direction, gameStatus, squareSize) => {\n    const initQueue = [[5, 8], [5, 7], [5, 6]]\n    const [snakeQueue, setSnakeQueue] = useState(initQueue)\n    const [sweetGrid, setSweetGrid] = useState(generateRandomSweet(initQueue, squareSize))\n\n    useEffect(\n        () => {\n            const id = setInterval(() => {\n                if (gameStatus !== GAME_STATUS.STARTED) {\n                    return\n                }\n                setSnakeQueue((prevQueue) => {\n                    let newQueue = getMovedQueue(prevQueue, direction)\n\n                    // snake eat the sweet\n                    if (targetInQueue(sweetGrid, snakeQueue)) {\n                        newQueue = eatSweet(newQueue, direction)\n                        setSweetGrid(generateRandomSweet(newQueue, squareSize))\n                    }\n\n                    return newQueue\n                })\n            }, 400)\n            return () => {\n                clearInterval(id)\n            }\n        }\n    )\n    return [snakeQueue, sweetGrid]\n}\n\nconst targetInQueue = (target, queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        if (queue[i][0] === target[0] && queue[i][1] === target[1]) {\n            return true\n        }\n    }\n    return false\n}\n\nconst outOfBounds = (x, y, squareSize) => {\n    return (x < 0 || x >= squareSize || y < 0 || y >= squareSize)\n}\n\nconst gameOver = (queue, squareSize) => {\n    const hasVisited = {}\n    for (const [x, y] of queue) {\n        if (outOfBounds(x, y, squareSize) || hasVisited[`${x},${y}`]) {\n            return true\n        }\n        hasVisited[`${x},${y}`] = true\n    }\n\n    return false\n}\n\nconst generateRandomSweet = (snakeQueue, squareSize) => {\n    log(`generateRandomSweet`, snakeQueue)\n    log(`squareSize`, squareSize)\n\n    let x = _.random(0, squareSize - 1)\n    let y = _.random(0, squareSize - 1)\n    while (targetInQueue([x, y], snakeQueue)) {\n        x = _.random(0, squareSize - 1)\n        y = _.random(0, squareSize - 1)\n    }\n\n    log(`x,y=`, x, y)\n    return [x, y]\n}\n\nconst StartButton = styled.button`\n  margin-top: 40px;\n  margin-bottom: 30px;\n\n  background: palevioletred;\n  color: white;\n  font-size: 1.5em;\n  padding: 0.3em 1.2em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`\n\nconst PauseButton = styled.button`\n  position: absolute;\n  right: 150px;\n  top: 50px;\n    \n  background: palevioletred;\n  color: white;\n  font-size: 1.2em;\n  padding: 0.3em 0.3em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`\n\nconst StyledButtonLine = styled.div`\n  height: 30px;\n  margin-top: 0.1em;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst StyledContainer = styled.div`\n  text-align: center;\n  margin: 0 auto;\n  color: #61dafb;\n`\n\nconst Container = ({appStart, appPause, endGame}) => {\n    const {gameStatus, squareSize} = useContext(AppContext)\n    const [direction, setDirection] = useState(3)\n    const [snakeQueue, sweetGrid] = useSnakeMove(direction, gameStatus, squareSize)\n\n    const containerStart = () => {\n        appStart()\n    }\n\n    const containerPause = () => {\n        appPause()\n    }\n\n    const renderGrids = () => {\n        if (gameOver(snakeQueue, squareSize)) {\n            log(`gameOver`)\n            endGame()\n        }\n\n        const displayed = getSquareDisplayed(snakeQueue, squareSize)\n        displayed[sweetGrid[0]][sweetGrid[1]] = true\n        const grids = []\n        for (let x = 0; x < squareSize; x++) {\n            const gridLine = []\n            for (let y = 0; y < squareSize; y++) {\n                gridLine.push(\n                    <Grid\n                        displayed={displayed[x][y]}\n                        gameStatus={gameStatus}\n                    />\n                )\n            }\n            grids.push(<StyledButtonLine>{gridLine}</StyledButtonLine>)\n        }\n        return grids\n    }\n\n    // when direction key pressed, set new Direction except opposite direction\n    const onKeyPressed = (event) => {\n        const keyMapper = {\n            \"ArrowUp\": 1,\n            \"ArrowRight\": 2,\n            \"ArrowDown\": 3,\n            \"ArrowLeft\": 4,\n        }\n        const newDirection = keyMapper[event.key]\n\n        // invalid keys\n        if (newDirection === undefined) {\n            return\n        }\n\n        setDirection((prevDirection) => {\n            if (isOppositeDirection(newDirection, prevDirection)) {\n                return prevDirection\n            }\n            return newDirection\n        })\n    }\n\n    return (\n        <StyledContainer\n            className=\"Container\"\n            onKeyDown={onKeyPressed}\n            tabIndex=\"0\"\n        >\n            <StartButton onClick={containerStart}>\n                Start SnakeGame\n            </StartButton>\n            <PauseButton onClick={containerPause}>\n                Pause\n            </PauseButton>\n\n            {renderGrids()}\n        </StyledContainer>\n    )\n}\n\nexport default Container\n","import React, {useState} from 'react'\nimport './App.css'\nimport Container from './containers/Container'\nimport {GAME_STATUS, SQUARE_SIZE} from './constant'\nimport styled from 'styled-components'\n\nexport const AppContext = React.createContext({})\n\nconst ModalContainer = styled.div`\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n`\n\nconst ModalMask = styled.div`\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n    background: black;\n    opacity: 0.5;\n`\n\nconst AlertWindow = styled.div`\n    margin: 0 auto;\n    width: 500px;\n    height: 200px;\n    line-height: 200px;\n    font-size: xx-large;\n    opacity: 1;\n    \n    top: 50%;\n    position: relative;\n    transform: translateY(-50%);\n    background: white;\n    text-align: center;\n`\n\nfunction App() {\n    const squareSize = SQUARE_SIZE\n    const [gameStatus, setGameStatus] = useState(GAME_STATUS.NOT_START)\n\n    const appStart = () => {\n        setGameStatus(GAME_STATUS.STARTED)\n    }\n\n    const appPause = () => {\n        setGameStatus((prev) => {\n            if (prev === GAME_STATUS.PAUSE) {\n                return GAME_STATUS.STARTED\n            } else {\n                return GAME_STATUS.PAUSE\n            }\n        })\n    }\n\n    const endGame = () => {\n        setGameStatus(GAME_STATUS.OVER)\n    }\n\n    const renderAlert = () => {\n        if (gameStatus !== GAME_STATUS.OVER) {\n            return null\n        }\n\n        return (\n            <ModalContainer>\n                <ModalMask></ModalMask>\n                <AlertWindow>\n                    GAME OVER~_~\n                </AlertWindow>\n            </ModalContainer>\n        )\n    }\n\n    return (\n        <AppContext.Provider\n            value={{\n                gameStatus,\n                squareSize,\n            }}\n        >\n            {\n                renderAlert()\n            }\n            <Container\n                appStart={appStart}\n                appPause={appPause}\n                endGame={endGame}\n            />\n        </AppContext.Provider>\n    )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}